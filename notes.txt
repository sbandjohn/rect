Data set:
	images of rectangles

Main problem:
Does a channel of convolution layer recognize corners?

Other problems:
what will happen if a second channel is added?
How does one convolution layer evolve?

Our methods:
1. observe the weights in the convolution kernel
2. input a retangle and observe the output of the convolution layer
3. use some data to fool the network.
4. use the convolution layer trained in the rectangle data set to recognize corners in other data set
5. ...

We start with:
A simple network:
	A convolution layer with some channels followed by a fully connected layer
A simple data set:
	A 10*10 grid, each pixel is 1 if there is a rectangle, 0 otherwise
	For simplicity, the grid is divided into four regions(left up, right up, left down, right down), each containing one rectangle or not.	

What we got:
The network doesn't work:
	When there is at most one rectangle in each region, the network counts retangles correcly.
	But when we put two rectangles in one region, it fails.

Our guess:
1. It doesn't recognize rectangle at all.
2. The network doesn't use corners to count.
3. It maybe simply finds "1" in each region.

Some other findings:
The size of the fully connected layer matters:
	If the layer is too large, most of the work may be done by the fully connected layer instead of the convolution layer.
	If it's too small, the network fails.

Next step:
use more complex, more randomized data to "force" the network to recognize retangles.



角

卷积层设置：
随机：约90%
固定：约60%

current question?
0. What does conv layer learn in corner recognition?

major questions?
1. In simple network, what does conv layer learn in rectangle recognition?
2. What happens if more layers/kernels are added?


0->1
method:
observation & compare
use the convolution layer trained in the rectangle data set to recognize corners in other data set
or switch them

1->2
some similar methods

experiment 1:
four regions

analysis

0?
experiment 2:
(better if illustrated)
input: 10*10 grid, 0~3 rectangles.
output: number of corners.
network: input -> conv layer with several channels -> fully connected -> output
result: 100% training, 90% test.

analysis
(better if illustrated)
conv kernels: in each kernel, all weights are similar

output of conv layer: recognize the region of rectangles
counting is done by fully connected layer

the kernel doesn't recognize corner

experiment 3:
same data set as experiment 2
delete convolution layer
result: 90% traing, 87% test

analysis
Convolution layer improves accuracy and speed up the learning process.

experiment 4:
same data as experiment 2 and 3
set the convolution layer to be corner extractors
result: 100% training and testing accuracy after 50,000 times

question:
Why can not a randomly initialized convolution layer evolve into corner extractors? 


next step:
two directions:
1. train the network to recognize four kinds of corners separately
2. add another convolution layer
3. fully connected fixed, train kernel


thinking:
network may think totally differnetly from us
train differently
